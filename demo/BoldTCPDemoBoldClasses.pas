(*****************************************)
(*      This file is autogenerated       *)
(*   Any manual changes will be LOST!    *)
(*****************************************)
(* Generated 1/30/2005 10:42:40 AM       *)
(*****************************************)
(* This file should be stored in the     *)
(* same directory as the form/datamodule *)
(* with the corresponding model          *)
(*****************************************)
(* Copyright notice:                     *)
(*                                       *)
(*****************************************)

unit BoldTCPDemoBoldClasses;

{$DEFINE BoldTCPDemoBoldClasses_unitheader}
{$INCLUDE BoldTCPDemoBoldClasses_Interface.inc}

{ Includefile for methodimplementations }

{$INCLUDE BoldTCPDemoBoldClasses.inc}

const
  BoldMemberAssertInvalidObjectType: string = 'Object of singlelink (%s.%s) is of wrong type (is %s, should be %s)';

{ TRootClass }

procedure TRootClassList.Add(NewObject: TRootClass);
begin
  if Assigned(NewObject) then
    AddElement(NewObject);
end;

function TRootClassList.IndexOf(anObject: TRootClass): Integer;
begin
  result := IndexOfElement(anObject);
end;

function TRootClassList.Includes(anObject: TRootClass) : Boolean;
begin
  result := IncludesElement(anObject);
end;

function TRootClassList.AddNew: TRootClass;
begin
  result := TRootClass(InternalAddNew);
end;

procedure TRootClassList.Insert(index: Integer; NewObject: TRootClass);
begin
  if assigned(NewObject) then
    InsertElement(index, NewObject);
end;

function TRootClassList.GetBoldObject(index: Integer): TRootClass;
begin
  result := TRootClass(GetElement(index));
end;

procedure TRootClassList.SetBoldObject(index: Integer; NewObject: TRootClass);
begin;
  SetElement(index, NewObject);
end;

{ TBooks }

function TBooks._Get_M_Title: TBAString;
begin
  assert(ValidateMember('TBooks', 'Title', 0, TBAString));
  Result := TBAString(BoldMembers[0]);
end;

function TBooks._GetTitle: String;
begin
  Result := M_Title.AsString;
end;

procedure TBooks._SetTitle(const NewValue: String);
begin
  M_Title.AsString := NewValue;
end;

function TBooks._Get_M_Author: TBAString;
begin
  assert(ValidateMember('TBooks', 'Author', 1, TBAString));
  Result := TBAString(BoldMembers[1]);
end;

function TBooks._GetAuthor: String;
begin
  Result := M_Author.AsString;
end;

procedure TBooks._SetAuthor(const NewValue: String);
begin
  M_Author.AsString := NewValue;
end;

function TBooks._Get_M_BookID: TBAInteger;
begin
  assert(ValidateMember('TBooks', 'BookID', 2, TBAInteger));
  Result := TBAInteger(BoldMembers[2]);
end;

function TBooks._GetBookID: Integer;
begin
  Result := M_BookID.AsInteger;
end;

procedure TBooks._SetBookID(const NewValue: Integer);
begin
  M_BookID.AsInteger := NewValue;
end;

procedure TBooksList.Add(NewObject: TBooks);
begin
  if Assigned(NewObject) then
    AddElement(NewObject);
end;

function TBooksList.IndexOf(anObject: TBooks): Integer;
begin
  result := IndexOfElement(anObject);
end;

function TBooksList.Includes(anObject: TBooks) : Boolean;
begin
  result := IncludesElement(anObject);
end;

function TBooksList.AddNew: TBooks;
begin
  result := TBooks(InternalAddNew);
end;

procedure TBooksList.Insert(index: Integer; NewObject: TBooks);
begin
  if assigned(NewObject) then
    InsertElement(index, NewObject);
end;

function TBooksList.GetBoldObject(index: Integer): TBooks;
begin
  result := TBooks(GetElement(index));
end;

procedure TBooksList.SetBoldObject(index: Integer; NewObject: TBooks);
begin;
  SetElement(index, NewObject);
end;

{ TNextNumberGenerator }

function TNextNumberGenerator._Get_M_LastNumberUsed: TBAInteger;
begin
  assert(ValidateMember('TNextNumberGenerator', 'LastNumberUsed', 0, TBAInteger));
  Result := TBAInteger(BoldMembers[0]);
end;

function TNextNumberGenerator._GetLastNumberUsed: Integer;
begin
  Result := M_LastNumberUsed.AsInteger;
end;

procedure TNextNumberGenerator._SetLastNumberUsed(const NewValue: Integer);
begin
  M_LastNumberUsed.AsInteger := NewValue;
end;

function TNextNumberGenerator._GetReturned: TReturnedNumbersList;
begin
  assert(ValidateMember('TNextNumberGenerator', 'Returned', 1, TReturnedNumbersList));
  Result := TReturnedNumbersList(BoldMembers[1]);
end;

procedure TNextNumberGeneratorList.Add(NewObject: TNextNumberGenerator);
begin
  if Assigned(NewObject) then
    AddElement(NewObject);
end;

function TNextNumberGeneratorList.IndexOf(anObject: TNextNumberGenerator): Integer;
begin
  result := IndexOfElement(anObject);
end;

function TNextNumberGeneratorList.Includes(anObject: TNextNumberGenerator) : Boolean;
begin
  result := IncludesElement(anObject);
end;

function TNextNumberGeneratorList.AddNew: TNextNumberGenerator;
begin
  result := TNextNumberGenerator(InternalAddNew);
end;

procedure TNextNumberGeneratorList.Insert(index: Integer; NewObject: TNextNumberGenerator);
begin
  if assigned(NewObject) then
    InsertElement(index, NewObject);
end;

function TNextNumberGeneratorList.GetBoldObject(index: Integer): TNextNumberGenerator;
begin
  result := TNextNumberGenerator(GetElement(index));
end;

procedure TNextNumberGeneratorList.SetBoldObject(index: Integer; NewObject: TNextNumberGenerator);
begin;
  SetElement(index, NewObject);
end;

{ TReturnedNumbers }

function TReturnedNumbers._Get_M_ReturnedNumber: TBAInteger;
begin
  assert(ValidateMember('TReturnedNumbers', 'ReturnedNumber', 0, TBAInteger));
  Result := TBAInteger(BoldMembers[0]);
end;

function TReturnedNumbers._GetReturnedNumber: Integer;
begin
  Result := M_ReturnedNumber.AsInteger;
end;

procedure TReturnedNumbers._SetReturnedNumber(const NewValue: Integer);
begin
  M_ReturnedNumber.AsInteger := NewValue;
end;

function TReturnedNumbers._Get_M_Reason: TBAString;
begin
  assert(ValidateMember('TReturnedNumbers', 'Reason', 1, TBAString));
  Result := TBAString(BoldMembers[1]);
end;

function TReturnedNumbers._GetReason: String;
begin
  Result := M_Reason.AsString;
end;

procedure TReturnedNumbers._SetReason(const NewValue: String);
begin
  M_Reason.AsString := NewValue;
end;

function TReturnedNumbers._Get_M_NumberGenerator: TBoldObjectReference;
begin
  assert(ValidateMember('TReturnedNumbers', 'NumberGenerator', 2, TBoldObjectReference));
  Result := TBoldObjectReference(BoldMembers[2]);
end;

function TReturnedNumbers._GetNumberGenerator: TNextNumberGenerator;
begin
  assert(not assigned(M_NumberGenerator.BoldObject) or (M_NumberGenerator.BoldObject is TNextNumberGenerator), SysUtils.format(BoldMemberAssertInvalidObjectType, [ClassName, 'NumberGenerator', M_NumberGenerator.BoldObject.ClassName, 'TNextNumberGenerator']));
  Result := TNextNumberGenerator(M_NumberGenerator.BoldObject);
end;

procedure TReturnedNumbers._SetNumberGenerator(const value: TNextNumberGenerator);
begin
  M_NumberGenerator.BoldObject := value;
end;

procedure TReturnedNumbersList.Add(NewObject: TReturnedNumbers);
begin
  if Assigned(NewObject) then
    AddElement(NewObject);
end;

function TReturnedNumbersList.IndexOf(anObject: TReturnedNumbers): Integer;
begin
  result := IndexOfElement(anObject);
end;

function TReturnedNumbersList.Includes(anObject: TReturnedNumbers) : Boolean;
begin
  result := IncludesElement(anObject);
end;

function TReturnedNumbersList.AddNew: TReturnedNumbers;
begin
  result := TReturnedNumbers(InternalAddNew);
end;

procedure TReturnedNumbersList.Insert(index: Integer; NewObject: TReturnedNumbers);
begin
  if assigned(NewObject) then
    InsertElement(index, NewObject);
end;

function TReturnedNumbersList.GetBoldObject(index: Integer): TReturnedNumbers;
begin
  result := TReturnedNumbers(GetElement(index));
end;

procedure TReturnedNumbersList.SetBoldObject(index: Integer; NewObject: TReturnedNumbers);
begin;
  SetElement(index, NewObject);
end;

function GeneratedCodeCRC: String;
begin
  result := '1646474937';
end;

procedure InstallObjectListClasses(BoldObjectListClasses: TBoldGeneratedClassList);
begin
  BoldObjectListClasses.AddObjectEntry('RootClass', TRootClassList);
  BoldObjectListClasses.AddObjectEntry('Books', TBooksList);
  BoldObjectListClasses.AddObjectEntry('NextNumberGenerator', TNextNumberGeneratorList);
  BoldObjectListClasses.AddObjectEntry('ReturnedNumbers', TReturnedNumbersList);
end;

procedure InstallBusinessClasses(BoldObjectClasses: TBoldGeneratedClassList);
begin
  BoldObjectClasses.AddObjectEntry('RootClass', TRootClass);
  BoldObjectClasses.AddObjectEntry('Books', TBooks);
  BoldObjectClasses.AddObjectEntry('NextNumberGenerator', TNextNumberGenerator);
  BoldObjectClasses.AddObjectEntry('ReturnedNumbers', TReturnedNumbers);
end;

var
  CodeDescriptor: TBoldGeneratedCodeDescriptor;

initialization
  CodeDescriptor := GeneratedCodes.AddGeneratedCodeDescriptorWithFunc('BoldTCPDemoModel', InstallBusinessClasses, InstallObjectListClasses, GeneratedCodeCRC);
finalization
  GeneratedCodes.Remove(CodeDescriptor);
end.

 
