(*****************************************)
(*      This file is autogenerated       *)
(*   Any manual changes will be LOST!    *)
(*****************************************)
(* Generated 1/27/2005 7:00:51 PM        *)
(*****************************************)
(* This file should be stored in the     *)
(* same directory as the form/datamodule *)
(* with the corresponding model          *)
(*****************************************)
(* Copyright notice:                     *)
(*                                       *)
(*****************************************)

unit BusinessClasses;

{$DEFINE BusinessClasses_unitheader}
{$INCLUDE BusinessClasses_Interface.inc}

{ Includefile for methodimplementations }


const
  BoldMemberAssertInvalidObjectType: string = 'Object of singlelink (%s.%s) is of wrong type (is %s, should be %s)';

{ TNew_ModelRoot }

procedure TNew_ModelRootList.Add(NewObject: TNew_ModelRoot);
begin
  if Assigned(NewObject) then
    AddElement(NewObject);
end;

function TNew_ModelRootList.IndexOf(anObject: TNew_ModelRoot): Integer;
begin
  result := IndexOfElement(anObject);
end;

function TNew_ModelRootList.Includes(anObject: TNew_ModelRoot) : Boolean;
begin
  result := IncludesElement(anObject);
end;

function TNew_ModelRootList.AddNew: TNew_ModelRoot;
begin
  result := TNew_ModelRoot(InternalAddNew);
end;

procedure TNew_ModelRootList.Insert(index: Integer; NewObject: TNew_ModelRoot);
begin
  if assigned(NewObject) then
    InsertElement(index, NewObject);
end;

function TNew_ModelRootList.GetBoldObject(index: Integer): TNew_ModelRoot;
begin
  result := TNew_ModelRoot(GetElement(index));
end;

procedure TNew_ModelRootList.SetBoldObject(index: Integer; NewObject: TNew_ModelRoot);
begin;
  SetElement(index, NewObject);
end;

{ TTestClass }

function TTestClass._Get_M_Name: TBAString;
begin
  assert(ValidateMember('TTestClass', 'Name', 0, TBAString));
  Result := TBAString(BoldMembers[0]);
end;

function TTestClass._GetName: String;
begin
  Result := M_Name.AsString;
end;

procedure TTestClass._SetName(const NewValue: String);
begin
  M_Name.AsString := NewValue;
end;

procedure TTestClassList.Add(NewObject: TTestClass);
begin
  if Assigned(NewObject) then
    AddElement(NewObject);
end;

function TTestClassList.IndexOf(anObject: TTestClass): Integer;
begin
  result := IndexOfElement(anObject);
end;

function TTestClassList.Includes(anObject: TTestClass) : Boolean;
begin
  result := IncludesElement(anObject);
end;

function TTestClassList.AddNew: TTestClass;
begin
  result := TTestClass(InternalAddNew);
end;

procedure TTestClassList.Insert(index: Integer; NewObject: TTestClass);
begin
  if assigned(NewObject) then
    InsertElement(index, NewObject);
end;

function TTestClassList.GetBoldObject(index: Integer): TTestClass;
begin
  result := TTestClass(GetElement(index));
end;

procedure TTestClassList.SetBoldObject(index: Integer; NewObject: TTestClass);
begin;
  SetElement(index, NewObject);
end;

function GeneratedCodeCRC: String;
begin
  result := '10177695';
end;

procedure InstallObjectListClasses(BoldObjectListClasses: TBoldGeneratedClassList);
begin
  BoldObjectListClasses.AddObjectEntry('New_ModelRoot', TNew_ModelRootList);
  BoldObjectListClasses.AddObjectEntry('TestClass', TTestClassList);
end;

procedure InstallBusinessClasses(BoldObjectClasses: TBoldGeneratedClassList);
begin
  BoldObjectClasses.AddObjectEntry('New_ModelRoot', TNew_ModelRoot);
  BoldObjectClasses.AddObjectEntry('TestClass', TTestClass);
end;

var
  CodeDescriptor: TBoldGeneratedCodeDescriptor;

initialization
  CodeDescriptor := GeneratedCodes.AddGeneratedCodeDescriptorWithFunc('New_Model', InstallBusinessClasses, InstallObjectListClasses, GeneratedCodeCRC);
finalization
  GeneratedCodes.Remove(CodeDescriptor);
end.

 
